import { BaseService } from 'warthog';
import { Service } from 'typedi';
import { {{entity.type}} } from './../{{entity.name}}/{{entity.name}}.model';
import { InjectRepository } from 'typeorm-typedi-extensions';
import { Repository } from 'typeorm';

import { {{query.name}}FTSOutput } from './{{query.name}}.resolver'

@Service('{{query.name}}FTSService')
export class {{query.name}}FTSService extends BaseService<{{entity.type}}> {
    constructor(@InjectRepository({{entity.type}}) protected readonly repository: Repository<{{entity.type}}>) {
        super({{entity.type}}, repository);
    }

    async search(query: string, limit:number = 10): Promise<{{query.name}}FTSOutput[]> {
        const { entities, raw } =  await this.repository.createQueryBuilder()
            .addSelect(
                `ts_rank_cd( {{query.index_col}}, (to_tsquery(:t_query)::text || ':*')::tsquery )`,
                `rank`
            )
            .where(`(to_tsquery(:t_query)::text || ':*')::tsquery @@ {{query.index_col}}`)
            .orderBy('rank', 'DESC')
            .limit(limit)
            .setParameter('t_query', query)
            .getRawAndEntities();

        const enhancedEntities = entities.map((e, index) => {
            return { item: e, rank: raw[index].rank, isTypeOf: '{{entity.type}}' } as {{query.name}}FTSOutput;
        });
          
        return enhancedEntities.reduce((accum: {{query.name}}FTSOutput[], entity) => {
            if (entity.rank > 0) {
                accum.push(entity);
            }
            return accum;
        }, []);
    }   
}