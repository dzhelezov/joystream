import { Service } from 'typedi';
{{#entities}}  
import { {{type}} } from '../{{model}}/{{model}}.model';
{{/entities}}  

import { InjectRepository } from 'typeorm-typedi-extensions';
import { Repository, getConnection } from 'typeorm';

import { {{query.typePrefix}}FTSOutput } from './{{query.typePrefix}}.resolver';

interface RawSQLResult {
    origin_table: string,
    id: string,
    rank: number,
    highlight: string
}

@Service('{{query.typePrefix}}FTSService')
export class {{query.typePrefix}}FTSService {
    {{#entities}}  
    readonly {{fieldName}}Repository: Repository<{{type}}>;
    {{/entities}} 

    constructor({{#entities}}@InjectRepository({{type}}) {{fieldName}}Repository: Repository<{{type}}>{{^last}},{{/last}}
                 {{/entities}}) {
        {{#entities}}  
        this.{{fieldName}}Repository = {{fieldName}}Repository;
        {{/entities}} 
    }

    async search(text: string, limit:number = 5): Promise<{{query.typePrefix}}FTSOutput[]> {
        const connection = getConnection();
		const queryRunner = connection.createQueryRunner();
        // establish real database connection using our new query runner
		await queryRunner.connect();
        await queryRunner.startTransaction('REPEATABLE READ');

        try {    
            const query = `
            SELECT origin_table, id, 
                ts_rank(tsv, phraseto_tsquery('{{query.language}}', $1)) as rank,
                ts_headline(document, phraseto_tsquery('{{query.language}}', $1)) as highlight
            FROM {{query.viewName}}
            WHERE phraseto_tsquery('{{query.language}}', $1) @@ tsv
            ORDER BY rank DESC
            LIMIT $2`;

            const results = await queryRunner.query(query, [text, limit]) as RawSQLResult[];

            if (results.length == 0) {
                return [];
            }

            const idMap:{ [id:string]: RawSQLResult } = {};
            results.forEach(item => idMap[item.id] = item);
            const ids: string[] = results.map(item => item.id);
            
            {{#entities}}
            const {{arrayName}}: {{type}}[] = await this.{{fieldName}}Repository.createQueryBuilder()
                        .where("id IN (:...ids)", { ids }).getMany();
            {{/entities}}

            const enhancedEntities = [{{#entities}}...{{arrayName}} {{^last}},{{/last}}{{/entities}}].map((e) => {
                return { item: e, 
                    rank: idMap[e.id].rank, 
                    highlight: idMap[e.id].highlight,
                    isTypeOf: idMap[e.id].origin_table } as {{query.typePrefix}}FTSOutput;
            });
            
            return enhancedEntities.reduce((accum: {{query.typePrefix}}FTSOutput[], entity) => {
                if (entity.rank > 0) {
                    accum.push(entity);
                }
                return accum;
            }, []).sort((a,b) => b.rank - a.rank);
        } finally {
            await queryRunner.commitTransaction();
        }
    }
}